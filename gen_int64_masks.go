// +build ignore

package main

import (
	"fmt"
	"os"
)

func main() {
	f, err := os.Create("masks_int64_amd64.s")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "//go:build !purego")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "// Auto-generated by gen_int64_masks.go - DO NOT EDIT")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "#include \"textflag.h\"")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "// Pre-computed permutation and shift tables for int64 unpacking")
	fmt.Fprintln(f, "// Each entry is 128 bytes: [permute_0_3][permute_4_7][shifts_0_3][shifts_4_7]")
	fmt.Fprintln(f, "// Format: 4 YMM registers worth of data per bitWidth")
	fmt.Fprintln(f, "")

	// Calculate total size: 23 bitWidths (9-31) * 128 bytes = 2944 bytes
	totalSize := 23 * 128
	fmt.Fprintf(f, "GLOBL ·permuteInt64Table(SB), RODATA|NOPTR, $%d\n", totalSize)

	offset := 0
	for bitWidth := 9; bitWidth <= 31; bitWidth++ {
		fmt.Fprintf(f, "\n// BitWidth %d (offset %d)\n", bitWidth, offset)

		// Compute permutations and shifts for 8 elements
		var permute0_3 [4]uint64
		var permute4_7 [4]uint64
		var shifts0_3 [4]uint64
		var shifts4_7 [4]uint64

		for i := 0; i < 8; i++ {
			temp := (bitWidth * i) / 32
			perm := uint64(temp) | (uint64(temp+1) << 32)
			shift := uint64((bitWidth * i) - (32 * temp))

			if i < 4 {
				permute0_3[i] = perm
				shifts0_3[i] = shift
			} else {
				permute4_7[i-4] = perm
				shifts4_7[i-4] = shift
			}
		}

		// Write permute_0_3 (32 bytes)
		for i := 0; i < 4; i++ {
			fmt.Fprintf(f, "DATA ·permuteInt64Table+%d(SB)/8, $0x%016x\n", offset, permute0_3[i])
			offset += 8
		}

		// Write permute_4_7 (32 bytes)
		for i := 0; i < 4; i++ {
			fmt.Fprintf(f, "DATA ·permuteInt64Table+%d(SB)/8, $0x%016x\n", offset, permute4_7[i])
			offset += 8
		}

		// Write shifts_0_3 (32 bytes)
		for i := 0; i < 4; i++ {
			fmt.Fprintf(f, "DATA ·permuteInt64Table+%d(SB)/8, $0x%016x\n", offset, shifts0_3[i])
			offset += 8
		}

		// Write shifts_4_7 (32 bytes)
		for i := 0; i < 4; i++ {
			fmt.Fprintf(f, "DATA ·permuteInt64Table+%d(SB)/8, $0x%016x\n", offset, shifts4_7[i])
			offset += 8
		}
	}

	fmt.Fprintf(f, "\n// Total size: %d bytes\n", totalSize)
}
